{"version":3,"sources":["components/layout/NavigationBar.js","actions/actions.js","services/historical.service.js","components/MainChart.js","components/Home.js","components/LiveChart.js","router/index.js","App.js","serviceWorker.js","reducers/reducers.js","index.js"],"names":["withRouter","props","ulmenubar","useRef","className","onClick","current","classList","toggle","ref","to","getHistoricalList","dispatch","type","axios","process","method","headers","then","response","data","catch","error","res","historicalData","err","MainChart","handleTimeRangeChange","timerange","setState","state","mode","TimeRange","croppedSeries","croppedVolumeSeries","this","undefined","series","crop","seriesVolume","timeRange","hideWeekends","enablePanZoom","onTimeRangeChanged","timeAxisStyle","axis","fill","stroke","height","style","close","normal","columns","interpolation","id","label","min","max","format","width","axisMargin","volume","React","Component","connect","useState","newHistoricalData","useEffect","length","events","map","item","itemArr","split","time","open","parseInt","high","low","timestamp","moment","Date","TimeEvent","toDate","sortedCollection","Collection","sortByTime","seriesData","TimeSeries","name","collection","volumeEvents","now","index","replace","IndexedEvent","sortedVolumeCollection","utc","Livechart","setSeries","ws","io","on","emit","getChartData","console","log","seriesVolumeData","RouterPage","exact","path","component","Home","LiveChart","App","Boolean","window","location","hostname","match","INITIAL_STATE","isFetching","combineReducers","action","Object","assign","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2fd08541.chunk.js","sourcesContent":["import React, {useRef} from 'react';\r\nimport {NavLink,withRouter } from 'react-router-dom';\r\nimport '../../assets/css/custom.css'\r\n\r\n const  NavigationBar = (props) =>{\r\n  \r\n  const ulmenubar = useRef(null);\r\n  \r\n  function toggleNavBar() {\r\n    ulmenubar.current.classList.toggle(\"active\");\r\n   }\r\n   return (\r\n      <div>\r\n           <nav className=\"navbar\">\r\n           <span className=\"navbar-toggle-span\"  onClick={toggleNavBar}>\r\n              <i className=\"fa fa-bars\"></i>\r\n             </span>\r\n             <ul className=\"main-nav-bar\" ref={ulmenubar}>\r\n                  <li> <NavLink to=\"/\"className=\"nav-link-bar\" >Home</NavLink></li>\r\n                  <li> <NavLink to=\"/liveChart\"className=\"nav-link-bar\" >Live Chart</NavLink></li>\r\n                 \r\n              </ul>\r\n            </nav>\r\n      </div>\r\n    )\r\n }\r\n\r\nexport default withRouter(NavigationBar);","import * as HistoricalService from '../services/historical.service';\r\n\r\nexport  const getHistoricalList = ()=> {\r\n    return  (dispatch) => {\r\n        dispatch({\r\n            type: 'GET_HISTORICAL_LIST_REQUEST'\r\n        });\r\n        return HistoricalService.getAllHistoricalData()\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: 'GET_HISTORICAL_LIST_SUCCESS',\r\n                    historicalData: res\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: 'GET_HISTORICAL_LIST_FAILURE',\r\n                    error: err\r\n                });\r\n            })\r\n    }\r\n}","import axios from \"axios\";\r\nconst WEB_SOCKET_URL = \"http://kaboom.rksv.net/watch\";\r\n\r\nexport const getAllHistoricalData = () => {\r\n  return axios(`${process.env.REACT_APP_TEST_VAR}historical`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      \"Accept-Encoding\": \"gzip, deflate\",\r\n    },\r\n  })\r\n    .then((response) => response.data)\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n};\r\nexport const getLiveChartData = () => {\r\n  return {\r\n    url: WEB_SOCKET_URL,\r\n  };\r\n};\r\n","import React from \"react\";\r\n\r\nimport { TimeRange } from \"pondjs\";\r\nimport {\r\n  Resizable,\r\n  Charts,\r\n  BarChart,\r\n  ChartContainer,\r\n  ChartRow,\r\n  YAxis,\r\n  LineChart\r\n} from \"react-timeseries-charts\";\r\n\r\nexport class MainChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mode: \"log\",\r\n      timerange: new TimeRange([1236985288649, 1326654398343]),\r\n    };\r\n  }\r\n\r\n  handleTimeRangeChange = (timerange) => {\r\n    this.setState({ timerange });\r\n  };\r\n\r\n  render() {\r\n    let croppedSeries;\r\n    let croppedVolumeSeries;\r\n    const { timerange } = this.state;\r\n    if (this.props.series !== undefined) {\r\n      croppedSeries = this.props.series.crop(timerange);\r\n    }\r\n    if(this.props.seriesVolume !== undefined){\r\n      croppedVolumeSeries = this.props.seriesVolume.crop(timerange);\r\n    }\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <Resizable>\r\n            <ChartContainer\r\n                timeRange={timerange}\r\n                hideWeekends={true}\r\n                enablePanZoom={true}\r\n                onTimeRangeChanged={this.handleTimeRangeChange}\r\n                timeAxisStyle={{ axis: { fill: \"none\", stroke: \"none\" } }}\r\n              >\r\n                {this.props.series !== undefined ? (\r\n             \r\n                <ChartRow height=\"300\">\r\n                  <Charts>\r\n                    <LineChart\r\n                      axis=\"y\"\r\n                      style={{ close: { normal: { stroke: \"steelblue\" } } }}\r\n                      columns={[\"close\"]}\r\n                      series={croppedSeries}\r\n                      interpolation=\"curveBasis\"\r\n                    />\r\n                  </Charts>\r\n                  <YAxis\r\n                    id=\"y\"\r\n                    label=\"Price\"\r\n                    min={croppedSeries.min(\"close\")}\r\n                    max={croppedSeries.max(\"close\")}\r\n                    format=\",.0f\"\r\n                    width=\"60\"\r\n                    type={this.state.mode}\r\n                  />\r\n                </ChartRow>\r\n                 ) : (\r\n                  <div></div>\r\n                )}\r\n                 {this.props.seriesVolume !== undefined ? (\r\n             \r\n                <ChartRow height=\"200\" axisMargin={0}>\r\n                  <Charts>\r\n                    <BarChart\r\n                      axis=\"y\"\r\n                      style={{ volume: { normal: { stroke: \"steelblue\" } } }}\r\n                      columns={[\"volume\"]}\r\n                      series={croppedVolumeSeries}\r\n                    />\r\n                  </Charts>\r\n                  <YAxis\r\n                    id=\"y\"\r\n                    label=\"Volume\"\r\n                    min={croppedVolumeSeries.min(\"volume\")}\r\n                    max={croppedVolumeSeries.max(\"volume\")}\r\n                    width=\"60\"\r\n                  />\r\n                </ChartRow>\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n              </ChartContainer>\r\n           \r\n          </Resizable>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { Collection, TimeSeries, TimeEvent, IndexedEvent } from \"pondjs\";\r\n\r\nimport { getHistoricalList } from \"../actions/actions\";\r\nimport {MainChart} from \"./MainChart\";\r\n\r\n/* Show the chart data through REST API \r\n*/\r\nconst name = \"Upstox-price\";\r\nconst columns = [\"time\", \"open\", \"high\", \"low\", \"close\"];\r\n\r\nconst Home = (props) => {\r\n  let [newHistoricalData, setHistoricalData] = useState({});\r\n  let [series, setSeries] = useState();\r\n  let [seriesVolume, setSeriesVolume] = useState();\r\n\r\n  /* Get the Historical Data through web services\r\n     store the historical data into state\r\n    */\r\n  useEffect(() => {\r\n    props.getHistoricalList();\r\n  }, []);\r\n\r\n  newHistoricalData = props.historicalData.historicalData;\r\n  if (newHistoricalData.length > 0) {\r\n    \r\n    // get the individual value of metics from array of csv\r\n    const events = newHistoricalData.map((item) => {\r\n      const itemArr = item.split(\",\");\r\n      const time = itemArr[0];\r\n      const open = parseInt(itemArr[1]);\r\n      const high = parseInt(itemArr[2]);\r\n      const low = parseInt(itemArr[3]);\r\n      const close = parseInt(itemArr[4]);\r\n\r\n      const timestamp = moment(new Date(parseInt(time)));\r\n      return new TimeEvent(timestamp.toDate(), {\r\n        open: +open,\r\n        close: +close,\r\n        low: +low,\r\n        high: +high,\r\n      });\r\n    });\r\n    const collection = new Collection(events);\r\n    const sortedCollection = collection.sortByTime();\r\n    const seriesData = new TimeSeries({\r\n      name,\r\n      columns,\r\n      collection: sortedCollection,\r\n    });\r\n\r\n    // get the volume value from array of csv\r\n    const volumeEvents = newHistoricalData.map((item) => {\r\n      const itemArr = item.split(\",\");\r\n      const time = itemArr[0];\r\n      let now = moment(new Date(parseInt(time)));\r\n      let date = moment(now).format(\"YYYY/MM/DD\");\r\n      const index = date.replace(/\\//g, \"-\");\r\n      const volume = parseInt(itemArr[5]);\r\n      return new IndexedEvent(index, { volume: +volume });\r\n    });\r\n    const volumeCollection = new Collection(volumeEvents);\r\n    const sortedVolumeCollection = volumeCollection.sortByTime();\r\n    const seriesVolumeData = new TimeSeries({\r\n      name: \"Upstox-volume\",\r\n      utc: false,\r\n      collection: sortedVolumeCollection,\r\n    });\r\n    series = seriesData;\r\n    seriesVolume = seriesVolumeData;\r\n  }\r\n  return (\r\n    <div>\r\n      <MainChart series={series} seriesVolume={seriesVolume} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    historicalData: state.historicalData,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getHistoricalList: () => {\r\n      dispatch(getHistoricalList());\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { Collection, TimeSeries, TimeEvent, IndexedEvent } from \"pondjs\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport { MainChart } from \"./MainChart\";\r\nimport * as HistoricalService from \"../services/historical.service\";\r\n\r\n/* Show the chart data through  websocket\r\n */\r\nconst name = \"Upstox-price\";\r\nconst columns = [\"time\", \"open\", \"high\", \"low\", \"close\"];\r\n\r\nconst Livechart = (props) => {\r\n  let [newHistoricalData, setHistoricalData] = useState({});\r\n  let [series, setSeries] = useState();\r\n  let [seriesVolume, setseriesVolume] = useState();\r\n\r\n  /* Get the Historical Data through Web socket\r\n     store the historical data into state\r\n    */\r\n  useEffect(() => {\r\n    let ws = io(HistoricalService.getLiveChartData().url);\r\n    ws.on(\"connect\", () => {\r\n      ws.emit(\"ping\", {});\r\n      ws.emit(\"sub\", { state: true });\r\n    });\r\n    ws.on(\"data\", (data) => {\r\n    \r\n      ws.emit(\"sub\", { state: true });\r\n      newHistoricalData = data.split();\r\n      getChartData(newHistoricalData);\r\n    });\r\n    ws.on(\"error\", (error) => {\r\n      console.log(error);\r\n    });\r\n  });\r\n\r\n  const getChartData = () => {\r\n    // get the individual value of metics from array of csv\r\n    const events = newHistoricalData.map((item) => {\r\n      const itemArr = item.split(\",\");\r\n      const time = itemArr[0];\r\n      const open = parseInt(itemArr[1]);\r\n      const high = parseInt(itemArr[2]);\r\n      const low = parseInt(itemArr[3]);\r\n      const close = parseInt(itemArr[4]);\r\n\r\n      const timestamp = moment(new Date(parseInt(time)));\r\n      return new TimeEvent(timestamp.toDate(), {\r\n        open: +open,\r\n        close: +close,\r\n        low: +low,\r\n        high: +high,\r\n      });\r\n    });\r\n\r\n    const collection = new Collection(events);\r\n    const sortedCollection = collection.sortByTime();\r\n    const seriesData = new TimeSeries({\r\n      name,\r\n      columns,\r\n      collection: sortedCollection,\r\n    });\r\n\r\n    // get the volume value from array of csv\r\n    const volumeEvents = newHistoricalData.map((item) => {\r\n      const itemArr = item.split(\",\");\r\n      const time = itemArr[0];\r\n      let now = moment(new Date(parseInt(time)));\r\n      let date = moment(now).format(\"YYYY/MM/DD\");\r\n      const index = date.replace(/\\//g, \"-\");\r\n      const volume = parseInt(itemArr[5]);\r\n      return new IndexedEvent(index, { volume: +volume });\r\n    });\r\n\r\n    const volumeCollection = new Collection(volumeEvents);\r\n    const sortedVolumeCollection = volumeCollection.sortByTime();\r\n    const seriesVolumeData = new TimeSeries({\r\n      name: \"Upstox-volume\",\r\n      utc: false,\r\n      collection: sortedVolumeCollection,\r\n    });\r\n \r\n    series = seriesData;\r\n    seriesVolume = seriesVolumeData;\r\n    setSeries(series);\r\n  };\r\n  return (\r\n    <div>\r\n      <MainChart series={series} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Livechart;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport NavigationBar from '../components/layout/NavigationBar';\r\nimport Home  from '../components/Home';\r\nimport LiveChart from \"../components/LiveChart\"\r\n\r\nexport const RouterPage = ()=>{\r\n    return (\r\n        <>\r\n        <Router >\r\n        <NavigationBar />\r\n            <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/liveChart\" component={LiveChart} />\r\n          </Switch>\r\n        </Router>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {RouterPage} from './router/index';\n\nfunction App() {\n  return (\n      <>\n       <Router>\n        <RouterPage/>     \n      </Router> \n      </>   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\r\n\r\nconst INITIAL_STATE = {\r\n  historicalData: [],\r\n  isFetching: false,\r\n  error: undefined,\r\n};\r\n\r\nconst getHistoricalDataReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"GET_HISTORICAL_LIST_REQUEST\":\r\n      return Object.assign({}, state, {\r\n        isFetching: true,\r\n      });\r\n    case \"GET_HISTORICAL_LIST_SUCCESS\":\r\n      return Object.assign({}, state, {\r\n        isFetching: false,\r\n        historicalData: action.historicalData,\r\n      });\r\n    case \"GET_HISTORICAL_LIST_FAILURE\":\r\n      return Object.assign({}, state, {\r\n        isFetching: false,\r\n        error: action.error,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  historicalData: getHistoricalDataReducer,\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers/reducers';\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n)\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}